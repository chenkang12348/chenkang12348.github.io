import{_ as n,c as s,o as a,e as p}from"./app.8bacf833.js";const y='{"title":"Vue\u5F00\u53D1\u5C0F\u6280\u5DE7","description":"","frontmatter":{"title":"Vue\u5F00\u53D1\u5C0F\u6280\u5DE7","theme":"default","tag":"Vue","time":"2021.06.01"},"headers":[{"level":2,"title":"Vue\u5F00\u53D1\u5C0F\u6280\u5DE7","slug":"vue\u5F00\u53D1\u5C0F\u6280\u5DE7"},{"level":3,"title":"1\u3001\u5224\u65AD\u4E00\u4E2A\u5B57\u7B26\u4E32\u662F\u5426\u4EE5on\u5F00\u5934","slug":"_1\u3001\u5224\u65AD\u4E00\u4E2A\u5B57\u7B26\u4E32\u662F\u5426\u4EE5on\u5F00\u5934"},{"level":3,"title":"2\u3001\u786E\u5B9Aproperty\u662F\u5426\u4E3A\u81EA\u5DF1\u7684","slug":"_2\u3001\u786E\u5B9Aproperty\u662F\u5426\u4E3A\u81EA\u5DF1\u7684"},{"level":3,"title":"3\u3001\u5224\u65AD\u662F\u5426\u4E3APromise","slug":"_3\u3001\u5224\u65AD\u662F\u5426\u4E3Apromise"},{"level":3,"title":"4\u3001\u5224\u65AD\u662F\u5426\u4E3A\u6574\u6570\u5B57\u7B26\u4E32","slug":"_4\u3001\u5224\u65AD\u662F\u5426\u4E3A\u6574\u6570\u5B57\u7B26\u4E32"},{"level":3,"title":"5\u3001\u7F13\u5B58\u5B57\u7B26\u4E32\u8BA1\u7B97\u7ED3\u679C","slug":"_5\u3001\u7F13\u5B58\u5B57\u7B26\u4E32\u8BA1\u7B97\u7ED3\u679C"},{"level":3,"title":"6\u3001\u8FDE\u5B57\u7B26\u8F6C\u9A7C\u5CF0/\u9A7C\u5CF0\u8F6C\u8FDE\u5B57\u7B26","slug":"_6\u3001\u8FDE\u5B57\u7B26\u8F6C\u9A7C\u5CF0-\u9A7C\u5CF0\u8F6C\u8FDE\u5B57\u7B26"},{"level":3,"title":"7\u3001\u83B7\u53D6\u5F53\u524D\u73AF\u5883\u7684\u5168\u5C40\u5BF9\u8C61","slug":"_7\u3001\u83B7\u53D6\u5F53\u524D\u73AF\u5883\u7684\u5168\u5C40\u5BF9\u8C61"},{"level":2,"title":"END","slug":"end"}],"relativePath":"views/article/Vue/libs/20210601.md"}',t={},o=p(`<h2 id="vue\u5F00\u53D1\u5C0F\u6280\u5DE7" tabindex="-1">Vue\u5F00\u53D1\u5C0F\u6280\u5DE7 <a class="header-anchor" href="#vue\u5F00\u53D1\u5C0F\u6280\u5DE7" aria-hidden="true">#</a></h2><h3 id="_1\u3001\u5224\u65AD\u4E00\u4E2A\u5B57\u7B26\u4E32\u662F\u5426\u4EE5on\u5F00\u5934" tabindex="-1">1\u3001\u5224\u65AD\u4E00\u4E2A\u5B57\u7B26\u4E32\u662F\u5426\u4EE5on\u5F00\u5934 <a class="header-anchor" href="#_1\u3001\u5224\u65AD\u4E00\u4E2A\u5B57\u7B26\u4E32\u662F\u5426\u4EE5on\u5F00\u5934" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token keyword">const</span> onRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^on[^a-z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">isOn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">key</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> onRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isOn</span><span class="token punctuation">(</span><span class="token string">&#39;onClick&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isOn</span><span class="token punctuation">(</span><span class="token string">&#39;onclick&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre></div><h3 id="_2\u3001\u786E\u5B9Aproperty\u662F\u5426\u4E3A\u81EA\u5DF1\u7684" tabindex="-1">2\u3001\u786E\u5B9Aproperty\u662F\u5426\u4E3A\u81EA\u5DF1\u7684 <a class="header-anchor" href="#_2\u3001\u786E\u5B9Aproperty\u662F\u5426\u4E3A\u81EA\u5DF1\u7684" aria-hidden="true">#</a></h3><blockquote><p>\u6B64\u65B9\u6CD5\u4F7F\u7528 Object.prototype.hasOwnProperty \u6765\u786E\u5B9A\u952E\u662F\u5426\u662F\u5BF9\u8C61\u672C\u8EAB\u7684\u5C5E\u6027\u3002 \u5F53\u6211\u4EEC\u4F7F\u7528 Object.getPrototypeOf() \u83B7\u53D6 testObj \u7684\u539F\u578B\u5E76\u5728\u5176\u4E0A\u8BBE\u7F6E age \u5C5E\u6027\u65F6\uFF0ChasOwn \u5C06\u8FD4\u56DE false\u3002 \u9664\u6B64\u4E4B\u5916\uFF0C\u5B83\u5728\u8FD9\u91CC\u4F7F\u7528 TypeScript \u7684 is \u5173\u952E\u5B57\uFF0C\u5B83\u521B\u5EFA\u4E86\u4E00\u4E2A\u7528\u6237\u5B9A\u4E49\u7684\u7C7B\u578B\u4FDD\u62A4\uFF0C\u5728\u8FD0\u884C\u65F6\u68C0\u67E5\u4EE5\u786E\u4FDD\u5B83\u662F\u6211\u4EEC\u5728\u7279\u5B9A\u8303\u56F4\u5185\u671F\u671B\u7684\u7C7B\u578B\u3002</p></blockquote><div class="language-js"><pre><code>
<span class="token keyword">const</span> hasOwnProperty <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>hasOwnProperty<span class="token punctuation">;</span>
<span class="token keyword">const</span> hasOwn <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> object<span class="token punctuation">,</span> <span class="token literal-property property">key</span><span class="token operator">:</span> string <span class="token operator">|</span> symbol<span class="token punctuation">)</span><span class="token operator">:</span> key is keyof <span class="token keyword">typeof</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span>
  <span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> testObj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>testObj<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>testObj<span class="token punctuation">)</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>testObj<span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre></div><h3 id="_3\u3001\u5224\u65AD\u662F\u5426\u4E3Apromise" tabindex="-1">3\u3001\u5224\u65AD\u662F\u5426\u4E3APromise <a class="header-anchor" href="#_3\u3001\u5224\u65AD\u662F\u5426\u4E3Apromise" aria-hidden="true">#</a></h3><blockquote><p>\u6B64\u65B9\u6CD5\u501F\u7528isObject\u5224\u65AD\u5F53\u524D\u503C\u5BF9\u8C61\uFF0C\u501F\u7528isFunction\u5224\u65AD\u5F53\u524D\u503C\u7684then\u548Ccatch\u5C5E\u6027\u662F\u51FD\u6570\u3002 \u4ED6\u4EEC\u4E09\u4E2A\u4E5F\u90FD\u4F7F\u7528 is \u5173\u952E\u5B57\u3002\u6B64\u5916\uFF0CisPromise \u8FD8\u4F7F\u7528\u6CDB\u578B\u6765\u4F20\u9012 Promise \u7684 Result \u7C7B\u578B\u3002</p></blockquote><div class="language-js"><pre><code>
<span class="token keyword">const</span> isObject <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> unknown<span class="token punctuation">)</span><span class="token operator">:</span> val is Record<span class="token operator">&lt;</span>any<span class="token punctuation">,</span> any<span class="token operator">&gt;</span> <span class="token operator">=&gt;</span>
  val <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> isFunction <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> unknown<span class="token punctuation">)</span><span class="token operator">:</span> val is <span class="token parameter">Function</span> <span class="token operator">=&gt;</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> isPromise <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> any<span class="token operator">&gt;</span><span class="token punctuation">(</span>val<span class="token operator">:</span> unknown<span class="token punctuation">)</span><span class="token operator">:</span> val is Promise<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">isObject</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isFunction</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>then<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>      <span class="token function">isFunction</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>catch<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isPromise</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isPromise</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre></div><h3 id="_4\u3001\u5224\u65AD\u662F\u5426\u4E3A\u6574\u6570\u5B57\u7B26\u4E32" tabindex="-1">4\u3001\u5224\u65AD\u662F\u5426\u4E3A\u6574\u6570\u5B57\u7B26\u4E32 <a class="header-anchor" href="#_4\u3001\u5224\u65AD\u662F\u5426\u4E3A\u6574\u6570\u5B57\u7B26\u4E32" aria-hidden="true">#</a></h3><blockquote><p>\u5148\u7528isString\u5224\u65AD\u662F\u5426\u4E3A\u5B57\u7B26\u4E32\u7C7B\u578B\uFF0C\u518D\u5224\u65AD\u662F\u5426\u4E3A&#39;NaN&#39;\u4E14\u9996\u5B57\u7B26\u4E0D\u662F-\uFF0C\u6700\u540E\u7528\u7A7A\u5B57\u7B26\u4E32\u5C06parseInt\u8F6C\u6362\u540E\u7684\u5341\u8FDB\u5236\u6570\u8F6C\u4E3A\u5B57\u7B26\u4E32\uFF0C\u5224\u65AD\u662F\u5426\u4E3A\u7B49\u4E8E\u539F\u59CB\u5B57\u7B26\u4E32\u3002</p></blockquote><div class="language-js"><pre><code>
<span class="token keyword">const</span> isString <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> unknown<span class="token punctuation">)</span><span class="token operator">:</span> val is <span class="token parameter">string</span> <span class="token operator">=&gt;</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">isIntegerKey</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">key</span><span class="token operator">:</span> unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token function">isString</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
  key <span class="token operator">!==</span> <span class="token string">&#39;NaN&#39;</span> <span class="token operator">&amp;&amp;</span>
  key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">&amp;&amp;</span>
  <span class="token string">&#39;&#39;</span> <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">===</span> key<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isIntegerKey</span><span class="token punctuation">(</span><span class="token string">&#39;10&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isIntegerKey</span><span class="token punctuation">(</span><span class="token string">&#39;010&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isIntegerKey</span><span class="token punctuation">(</span><span class="token string">&#39;3.0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isIntegerKey</span><span class="token punctuation">(</span><span class="token string">&#39;Vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre></div><h3 id="_5\u3001\u7F13\u5B58\u5B57\u7B26\u4E32\u8BA1\u7B97\u7ED3\u679C" tabindex="-1">5\u3001\u7F13\u5B58\u5B57\u7B26\u4E32\u8BA1\u7B97\u7ED3\u679C <a class="header-anchor" href="#_5\u3001\u7F13\u5B58\u5B57\u7B26\u4E32\u8BA1\u7B97\u7ED3\u679C" aria-hidden="true">#</a></h3><blockquote><p>\u8FD9\u662F\u4E00\u4E2A\u9AD8\u9636\u51FD\u6570\uFF0C\u5185\u90E8\u4F7F\u7528\u95ED\u5305\u6765\u7F13\u5B58\u4E4B\u524D\u7684\u8BA1\u7B97\u7ED3\u679C\uFF0C\u5982\u679C\u518D\u6B21\u8C03\u7528\u65F6\u53D1\u73B0\u5DF2\u7ECF\u8BA1\u7B97\u8FC7\uFF0C\u5219\u8FD4\u56DE\u4E4B\u524D\u7684\u7ED3\u679C\u3002</p></blockquote><div class="language-js"><pre><code>
<span class="token keyword">const</span> cacheStringFunction <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">str</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> string<span class="token operator">&gt;</span><span class="token punctuation">(</span>fn<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter"><span class="token constant">T</span></span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token literal-property property">cache</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">&gt;</span> <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">str</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> hit <span class="token operator">=</span> cache<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> hit <span class="token operator">||</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> any<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> getUpperCase <span class="token operator">=</span> <span class="token function">cacheStringFunction</span><span class="token punctuation">(</span><span class="token punctuation">(</span>str<span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter">string</span> <span class="token operator">=&gt;</span>
  str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getUpperCase</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// A</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getUpperCase</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// A</span>
</code></pre></div><h3 id="_6\u3001\u8FDE\u5B57\u7B26\u8F6C\u9A7C\u5CF0-\u9A7C\u5CF0\u8F6C\u8FDE\u5B57\u7B26" tabindex="-1">6\u3001\u8FDE\u5B57\u7B26\u8F6C\u9A7C\u5CF0/\u9A7C\u5CF0\u8F6C\u8FDE\u5B57\u7B26 <a class="header-anchor" href="#_6\u3001\u8FDE\u5B57\u7B26\u8F6C\u9A7C\u5CF0-\u9A7C\u5CF0\u8F6C\u8FDE\u5B57\u7B26" aria-hidden="true">#</a></h3><blockquote><p>\u4EE5\u4E0A\u4E24\u79CD\u65B9\u6CD5\u90FD\u4F7F\u7528\u6B63\u5219\u8868\u8FBE\u5F0F\u5339\u914D\u548C\u4F7F\u7528String.prototype.replace()\u66FF\u6362\u5B57\u7B26\uFF0C\u5E76\u4E14\u90FD\u88AB\u4E0A\u4E00\u8282\u4ECB\u7ECD\u7684\u7F13\u5B58\u51FD\u6570\u5305\u88F9\uFF0C\u4E5F\u5C31\u662F\u8BF4\u4E00\u65E6\u9700\u8981\u5904\u7406\u76F8\u540C\u7684\u5B57\u7B26\u4E32\uFF0C \u4F1A\u76F4\u63A5\u8FD4\u56DE\u7F13\u5B58\u7ED3\u679C\u3002</p></blockquote><div class="language-js"><pre><code>
<span class="token keyword">const</span> cacheStringFunction <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">str</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> string<span class="token operator">&gt;</span><span class="token punctuation">(</span>fn<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter"><span class="token constant">T</span></span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token literal-property property">cache</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">&gt;</span> <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">str</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> hit <span class="token operator">=</span> cache<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> hit <span class="token operator">||</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> any<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> camelizeRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-(\\w)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> camelize <span class="token operator">=</span> <span class="token function">cacheStringFunction</span><span class="token punctuation">(</span><span class="token punctuation">(</span>str<span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter">string</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>camelizeRE<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>c <span class="token operator">?</span> c<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> hyphenateRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\B([A-Z])</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> hyphenate <span class="token operator">=</span> <span class="token function">cacheStringFunction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">str</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>hyphenateRE<span class="token punctuation">,</span> <span class="token string">&#39;-$1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">camelize</span><span class="token punctuation">(</span><span class="token string">&#39;on-click&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// onClick</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">camelize</span><span class="token punctuation">(</span><span class="token string">&#39;test-a-click&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// testAClick</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">hyphenate</span><span class="token punctuation">(</span><span class="token string">&#39;onClick&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// on-click</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">hyphenate</span><span class="token punctuation">(</span><span class="token string">&#39;testAClick&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// test-a-clic</span>
</code></pre></div><h3 id="_7\u3001\u83B7\u53D6\u5F53\u524D\u73AF\u5883\u7684\u5168\u5C40\u5BF9\u8C61" tabindex="-1">7\u3001\u83B7\u53D6\u5F53\u524D\u73AF\u5883\u7684\u5168\u5C40\u5BF9\u8C61 <a class="header-anchor" href="#_7\u3001\u83B7\u53D6\u5F53\u524D\u73AF\u5883\u7684\u5168\u5C40\u5BF9\u8C61" aria-hidden="true">#</a></h3><blockquote><p>\u8FD9\u91CC\u4E5F\u7528\u5230\u4E86\u95ED\u5305\uFF0C\u4F46\u662F\uFF0C\u8FD9\u6B21\u95ED\u5305\u5B58\u50A8\u7684 _globalThis \u662F\u5728\u5F53\u524D\u52A0\u8F7D\u7684\u6A21\u5757\u4E2D\uFF0C\u6240\u4EE5\uFF0C\u53EA\u9700\u8981\u8C03\u7528\u4E00\u6B21\uFF0C\u5224\u65AD\u4E00\u6B21\uFF0C\u4E0D\u9700\u8981\u540E\u7EED\u7684\u5224\u65AD\u3002</p></blockquote><p>\u6211\u4EEC\u770B\u4E00\u4E0B\u51FD\u6570\u5185\u90E8\u7684\u903B\u8F91\uFF0C\u5B83\u7684\u4F18\u5148\u7EA7\u662F\uFF1A</p><ul><li><p>\u4F7F\u7528 globalThis\uFF0C\u5B83\u63D0\u4F9B\u4E86\u4E00\u79CD\u8DE8\u73AF\u5883\u8BBF\u95EE\u5168\u5C40\u5BF9\u8C61\u7684\u6807\u51C6\u65B9\u6CD5\u3002</p></li><li><p>\u5224\u65ADself\uFF0C\u8FD9\u662F\u56E0\u4E3A\u5728Web Workers\u4E2D\uFF0C\u65E0\u6CD5\u8BBF\u95EEwindow\u5BF9\u8C61\uFF0C\u53EA\u80FD\u901A\u8FC7self\u8BBF\u95EE\u5F53\u524D\u5168\u5C40\u5BF9\u8C61\u3002</p></li><li><p>\u5E38\u89C1\u7684\u7A97\u53E3\u5BF9\u8C61\u3002</p></li><li><p>Node.js \u4E2D\u7684\u5168\u5C40\u5BF9\u8C61\u3002</p></li></ul><div class="language-js"><pre><code>
<span class="token keyword">let</span> <span class="token literal-property property">_globalThis</span><span class="token operator">:</span> any<span class="token punctuation">;</span>
<span class="token keyword">const</span> getGlobalThis <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter">any</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    _globalThis <span class="token operator">||</span>
    <span class="token punctuation">(</span>_globalThis <span class="token operator">=</span>
      <span class="token keyword">typeof</span> globalThis <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span>
        <span class="token operator">?</span> globalThis
        <span class="token operator">:</span> <span class="token keyword">typeof</span> self <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span>
        <span class="token operator">?</span> self
        <span class="token operator">:</span> <span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span>
        <span class="token operator">?</span> window
        <span class="token operator">:</span> <span class="token keyword">typeof</span> global <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span>
        <span class="token operator">?</span> global
        <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getGlobalThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getGlobalThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="end" tabindex="-1">END <a class="header-anchor" href="#end" aria-hidden="true">#</a></h2><hr>`,25),e=[o];function c(l,u,k,r,i,g){return a(),s("div",null,e)}var f=n(t,[["render",c]]);export{y as __pageData,f as default};
